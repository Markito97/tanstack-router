/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as SettingsNotificationImport } from './routes/settings/notification'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as FilesSplatImport } from './routes/files/$'
import { Route as LayoutLayoutBImport } from './routes/_layout/layout-b'
import { Route as LayoutLayoutAImport } from './routes/_layout/layout-a'
import { Route as PostsPostsIndexImport } from './routes/posts/posts.index'
import { Route as PostsPostIdEditImport } from './routes/posts.$postId.edit'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRoute,
} as any)

const SettingsNotificationRoute = SettingsNotificationImport.update({
  id: '/settings/notification',
  path: '/settings/notification',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const FilesSplatRoute = FilesSplatImport.update({
  id: '/files/$',
  path: '/files/$',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLayoutBRoute = LayoutLayoutBImport.update({
  id: '/_layout/layout-b',
  path: '/layout-b',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLayoutARoute = LayoutLayoutAImport.update({
  id: '/_layout/layout-a',
  path: '/layout-a',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostsIndexRoute = PostsPostsIndexImport.update({
  id: '/posts/posts/',
  path: '/posts/posts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdEditRoute = PostsPostIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PostsPostIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/layout-a': {
      id: '/_layout/layout-a'
      path: '/layout-a'
      fullPath: '/layout-a'
      preLoaderRoute: typeof LayoutLayoutAImport
      parentRoute: typeof rootRoute
    }
    '/_layout/layout-b': {
      id: '/_layout/layout-b'
      path: '/layout-b'
      fullPath: '/layout-b'
      preLoaderRoute: typeof LayoutLayoutBImport
      parentRoute: typeof rootRoute
    }
    '/files/$': {
      id: '/files/$'
      path: '/files/$'
      fullPath: '/files/$'
      preLoaderRoute: typeof FilesSplatImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/notification': {
      id: '/settings/notification'
      path: '/settings/notification'
      fullPath: '/settings/notification'
      preLoaderRoute: typeof SettingsNotificationImport
      parentRoute: typeof rootRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditImport
      parentRoute: typeof PostsPostIdImport
    }
    '/posts/posts/': {
      id: '/posts/posts/'
      path: '/posts/posts'
      fullPath: '/posts/posts'
      preLoaderRoute: typeof PostsPostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PostsPostIdRouteChildren {
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
}

const PostsPostIdRouteChildren: PostsPostIdRouteChildren = {
  PostsPostIdEditRoute: PostsPostIdEditRoute,
}

const PostsPostIdRouteWithChildren = PostsPostIdRoute._addFileChildren(
  PostsPostIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/layout-a': typeof LayoutLayoutARoute
  '/layout-b': typeof LayoutLayoutBRoute
  '/files/$': typeof FilesSplatRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/notification': typeof SettingsNotificationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/posts': typeof PostsPostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/layout-a': typeof LayoutLayoutARoute
  '/layout-b': typeof LayoutLayoutBRoute
  '/files/$': typeof FilesSplatRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/notification': typeof SettingsNotificationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/posts': typeof PostsPostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/_layout/layout-a': typeof LayoutLayoutARoute
  '/_layout/layout-b': typeof LayoutLayoutBRoute
  '/files/$': typeof FilesSplatRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/notification': typeof SettingsNotificationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/posts/': typeof PostsPostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/layout-a'
    | '/layout-b'
    | '/files/$'
    | '/posts/$postId'
    | '/settings/notification'
    | '/settings/profile'
    | '/posts'
    | '/posts/$postId/edit'
    | '/posts/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/layout-a'
    | '/layout-b'
    | '/files/$'
    | '/posts/$postId'
    | '/settings/notification'
    | '/settings/profile'
    | '/posts'
    | '/posts/$postId/edit'
    | '/posts/posts'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/_layout/layout-a'
    | '/_layout/layout-b'
    | '/files/$'
    | '/posts/$postId'
    | '/settings/notification'
    | '/settings/profile'
    | '/posts/'
    | '/posts/$postId/edit'
    | '/posts/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  LayoutLayoutARoute: typeof LayoutLayoutARoute
  LayoutLayoutBRoute: typeof LayoutLayoutBRoute
  FilesSplatRoute: typeof FilesSplatRoute
  PostsPostIdRoute: typeof PostsPostIdRouteWithChildren
  SettingsNotificationRoute: typeof SettingsNotificationRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsPostsIndexRoute: typeof PostsPostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  LayoutLayoutARoute: LayoutLayoutARoute,
  LayoutLayoutBRoute: LayoutLayoutBRoute,
  FilesSplatRoute: FilesSplatRoute,
  PostsPostIdRoute: PostsPostIdRouteWithChildren,
  SettingsNotificationRoute: SettingsNotificationRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsPostsIndexRoute: PostsPostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/_layout/layout-a",
        "/_layout/layout-b",
        "/files/$",
        "/posts/$postId",
        "/settings/notification",
        "/settings/profile",
        "/posts/",
        "/posts/posts/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_layout/layout-a": {
      "filePath": "_layout/layout-a.tsx"
    },
    "/_layout/layout-b": {
      "filePath": "_layout/layout-b.tsx"
    },
    "/files/$": {
      "filePath": "files/$.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx",
      "children": [
        "/posts/$postId/edit"
      ]
    },
    "/settings/notification": {
      "filePath": "settings/notification.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/posts/$postId/edit": {
      "filePath": "posts.$postId.edit.tsx",
      "parent": "/posts/$postId"
    },
    "/posts/posts/": {
      "filePath": "posts/posts.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
